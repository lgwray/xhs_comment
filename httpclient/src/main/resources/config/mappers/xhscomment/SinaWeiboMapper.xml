<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="net.shinc.orm.mybatis.mappers.xhscomment.SinaWeiboMapper" >
  <resultMap id="BaseResultMap" type="SinaWeibo" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="mid" property="mid" jdbcType="BIGINT" />
    <result column="comment_id" property="commentId" jdbcType="BIGINT" />
    <result column="nick" property="nick" jdbcType="VARCHAR" />
    <result column="article_id" property="articleId" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="SinaWeibo" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    id, mid, comment_id, nick, article_id
  </sql>
  
  <sql id="Blob_Column_List" >
    content
  </sql>
  
  <select id="getSinaWbCommentByArticleId" resultType="java.util.Map">
  	select 
  		a.id,a.content comment,
  		(select nickname from nick where flag='1' and id >= (select floor(rand()*(select max(id) as nick_id from nick where flag='1'))) order by id limit 1) nick,
  		'weibo' news_type
  	from 
		sina_weibo a
    inner join
		sina_weibo_article b
	on
		b.mid = a.mid
  	where 1 = 1
  		and b.article_id = #{articleId}
  </select>
  
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from sina_weibo
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sina_weibo
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="SinaWeibo" >
    insert into sina_weibo (id, mid, comment_id, 
      nick, article_id, content
      )
    values (#{id,jdbcType=INTEGER}, #{mid,jdbcType=BIGINT}, #{commentId,jdbcType=BIGINT}, 
      #{nick,jdbcType=VARCHAR}, #{articleId,jdbcType=VARCHAR}, #{content,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="SinaWeibo" >
    insert into sina_weibo
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="mid != null" >
        mid,
      </if>
      <if test="commentId != null" >
        comment_id,
      </if>
      <if test="nick != null" >
        nick,
      </if>
      <if test="articleId != null" >
        article_id,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="mid != null" >
        #{mid,jdbcType=BIGINT},
      </if>
      <if test="commentId != null" >
        #{commentId,jdbcType=BIGINT},
      </if>
      <if test="nick != null" >
        #{nick,jdbcType=VARCHAR},
      </if>
      <if test="articleId != null" >
        #{articleId,jdbcType=VARCHAR},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="SinaWeibo" >
    update sina_weibo
    <set >
      <if test="mid != null" >
        mid = #{mid,jdbcType=BIGINT},
      </if>
      <if test="commentId != null" >
        comment_id = #{commentId,jdbcType=BIGINT},
      </if>
      <if test="nick != null" >
        nick = #{nick,jdbcType=VARCHAR},
      </if>
      <if test="articleId != null" >
        article_id = #{articleId,jdbcType=VARCHAR},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="SinaWeibo" >
    update sina_weibo
    set mid = #{mid,jdbcType=BIGINT},
      comment_id = #{commentId,jdbcType=BIGINT},
      nick = #{nick,jdbcType=VARCHAR},
      article_id = #{articleId,jdbcType=VARCHAR},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="SinaWeibo" >
    update sina_weibo
    set mid = #{mid,jdbcType=BIGINT},
      comment_id = #{commentId,jdbcType=BIGINT},
      nick = #{nick,jdbcType=VARCHAR},
      article_id = #{articleId,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>